#!/usr/bin/env python
# encoding: utf-8
#
# @Author: David Nidever
# @Date: Jan 2022
# @Filename: ap2d
# @License: BSD 3-Clause
# @Copyright: David Nidever


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import subprocess
import pdb
import traceback
from apogee_drp.plan import mkplan
from apogee_drp.apred import ap2d
from apogee_drp.utils import apload

if __name__ == '__main__' :

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Runs apogee ap2D reduction')
    parser.add_argument('--planfile', type=str, nargs=1, help='Plan file')
    parser.add_argument('--num', type=str, nargs=1, help='Exposure number')
    parser.add_argument('--apred', type=str, nargs=1, help='APOGEE Reduction version')
    parser.add_argument('--telescope', type=str, nargs=1, help='Telescope')
    parser.add_argument('--psfid', type=str, nargs=1, help='PSF calibration file ID')
    parser.add_argument('--modelpsf', type=str, nargs=1, help='Model PSF calibration file ID')
    parser.add_argument('--waveid', type=str, nargs=1, help='Wavelength calibration file ID')
    parser.add_argument('--fluxid', type=str, nargs=1, help='Flux calibration file ID')
    parser.add_argument('--clobber', help='Overwrite files?',action="store_true")
    parser.add_argument('--unlock', help='Remove lock files and start fresh',action="store_true")
    args = parser.parse_args()

    if args.clobber:
        clobber = '1'
    else:
        clobber = '0'
    if args.unlock:
        unlock = '1'
    else:
        unlock = '0'
    psfid = args.psfid
    if type(psfid) is list:
        psfid = psfid[0]
    modelpsf = args.modelpsf
    if type(modelpsf) is list:
        modelpsf = modelpsf[0]
    waveid = args.waveid
    if type(waveid) is list:
        waveid = waveid[0]
    fluxid = args.fluxid
    if type(fluxid) is list:
        fluxid = fluxid[0]

    if args.planfile is None and args.num is None:
        raise ValueError('Must input either planfile or exposure number')

    # Make plan file for single exposure, if necessary
    if args.num is not None:
        if args.apred is None or args.telescope is None:
            raise ValueError('apred and telescope must be input with exposure num')
        num = int(args.num[0])
        apred = args.apred[0]
        telescope = args.telescope[0]
        load = apload.ApLoad(apred=apred,telescope=telescope)
        mjd = int(load.cmjd(num))
        if mjd >= 59556:
            fps = True
        else:
            fps = False

        # This makes sure that the plan file uses the input PSFID
        # otherwise mkplan() will automatically use the default modelpsf
        # even if the PSFID is input
        if modelpsf is None and psfid is None:
            psflibrary = True
        else:
            psflibrary = False
        planfile = mkplan.mkplan(num,apred=apred,telescope=telescope,waveid=waveid,
                                 psfid=psfid,modelpsf=modelpsf,psflibrary=psflibrary,
                                 fluxid=fluxid,fps=fps,ap2d=True,clobber=True)
    else:
        planfile = args.planfile[0]

    try:
        ap2d.ap2d(planfile,clobber=args.clobber,unlock=args.unlock)
        #subprocess.call(["idl","-e","ap2d,'"+planfile+"',clobber="+clobber+",unlock="+unlock])
    except:
        traceback.print_exc()
