#!/usr/bin/env python
#
# Run the APOGEE Data Release Processing

import os
import time
from astropy.io import fits
from astropy.table import Table
from argparse import ArgumentParser
from dlnpyutils import utils as dln
import subprocess
from apogee_drp.plan import apogeedrp

# Main command-line program
if __name__ == "__main__":
    parser = ArgumentParser(description='APOGEE Data Release Processing')
    parser.add_argument('observatory', type=str, nargs=1, default='apo', help='Observatory (apo or lco)')
    parser.add_argument('apred', type=str, nargs=1, help='APOGEE Reduction version')
    parser.add_argument('--mjd', type=str, nargs=1, help='MJD list/range')
    parser.add_argument('--steps', type=str, nargs=1, help='Processing steps (setup, master, 3d, cal, plan, apred, rv, summary, unified, qa)')    
    parser.add_argument('--caltypes', type=str, nargs=1, help='Calibration types to run (master/daily cal)')
    parser.add_argument('--nodes', type=int, nargs=1, default=5, help='How many nodes to use')
    parser.add_argument('--alloc', type=str, nargs=1, default='', help='Which SDSS slurm partition to use.')
    parser.add_argument('--walltime', type=str, nargs=1, default='336:00:00', help='Maximum slurm run time')
    parser.add_argument('--fresh', action='store_true', help='Start fresh.')
    parser.add_argument('--linkvers', type=str, nargs=1, help='Link master calibration files to this reduction version.')
    parser.add_argument('--clobber', action='store_true', help='Overwrite any existing files')
    parser.add_argument('--debug', action='store_true', help='For testing purposes')
    args = parser.parse_args()

    t0 = time.time()
    observatory = args.observatory[0]
    if isinstance(args.apred,list):
        apred = args.apred[0]
    else:
        apred = args.apred
    if isinstance(args.mjd,list):
        mjd = args.mjd[0]
    else:
        mjd = None
    if isinstance(args.steps,list):
        steps = args.steps[0]
    else:
        steps = None
    if isinstance(args.caltypes,list):
        caltypes = args.caltypes[0]
        if caltypes.find(','):  # split into list if comma-separated
            caltypes = caltypes.split(',')
    else:
        caltypes = None        
    if isinstance(args.nodes,list):
        nodes = args.nodes[0]
    else:
        nodes = args.nodes
    if isinstance(args.alloc,list):
        alloc = args.alloc[0]
    else:
        alloc = 'sdss-np'
    if isinstance(args.walltime,list):
        walltime = args.walltime[0]
    else:
        walltime = args.walltime     
    if isinstance(args.linkvers,list):
        linkvers = args.linkvers[0]
    else:
        linkvers = None

    # Run data reduction
    apogeedrp.run(observatory,apred,mjd=mjd,steps=steps,caltypes=caltypes,
                  clobber=args.clobber,alloc=alloc,nodes=nodes,walltime=walltime,
                  fresh=args.fresh,linkvers=linkvers,debug=args.debug)
