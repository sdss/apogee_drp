#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Jon Holtzman
# @Date: March 2018
# @Filename: mkgrid
# @License: BSD 3-Clause
# @Copyright: Jon Holtzman
# updates by D. Nidever, 12/17/2021

from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import subprocess
import pdb
import traceback

if __name__ == '__main__' :

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Wrapper to run IDL makecal')
    parser.add_argument('--file', type=str, help='Master calibration index file')
    parser.add_argument('--det', type=int, help='apDetector ID')
    parser.add_argument('--dark', type=int, help='apDark ID')
    parser.add_argument('--flat', type=int, help='apFlat ID')
    parser.add_argument('--wave', type=int, help='apWave ID')
    parser.add_argument('--multiwave', type=int, help='multiwave ID')
    parser.add_argument('--dailywave', type=int, help='daily wavelength ID')
    parser.add_argument('--lsf', type=int, help='LSF ID')
    parser.add_argument('--bpm', type=int, help='apBPM ID')
    parser.add_argument('--psf', type=int, help='PSF ID')
    parser.add_argument('--flux', type=int, help='apFlux ID')
    parser.add_argument('--sparse', type=int, help='apSparse ID')
    parser.add_argument('--fiber', type=int, help='apFiber ID')
    parser.add_argument('--littrow', type=int, help='apLittrow ID')
    parser.add_argument('--persist', type=int, help='apPersist ID')
    parser.add_argument('--modelpersist', type=int, help='apModelPersist ID')
    parser.add_argument('--response', type=int, help='apResponse ID')
    parser.add_argument('--modelpsf', type=int, help='apModelPSF ID')    
    parser.add_argument('--fpi', type=int, help='FPI ID')
    parser.add_argument('--telluric', type=str, help='Telluric ID')    
    parser.add_argument('--mjd', type=int, help='MJD')
    parser.add_argument('--nskip', type=int, help='Number of arclamps to skip for WAVE')
    parser.add_argument('--vers', type=str, default='daily', help='APOGEE Reduction version')
    parser.add_argument('--telescope', type=str, default='apo25m', help='Telescope')
    parser.add_argument('--full', type=str, nargs='*', help='Full processing for MKLSF')
    parser.add_argument('--newwave', type=str, nargs='*', help='newwave parameter for MKLSF')
    parser.add_argument('--nofit', type=str, nargs='*', help='/nofit for MKWAVE')
    parser.add_argument('--pl', type=str, nargs='*', help='Plotting for MKLSF')
    parser.add_argument('--clobber', type=str, nargs='*', help='Overwrite files')
    parser.add_argument('--unlock', type=str, nargs='*', help='Remove lock file and start fresh')
    parser.add_argument('--librarypsf', type=str, nargs='*', help='Use PSF library')
    args = parser.parse_args()
    argsdict = vars(args)

    # Check that we have some inputs 
    chknames = ['file','det','dark','flat','wave','multiwave','dailywave','lsf','bpm','psf','flux',
                'sparse','fiber','littrow','persist','modelpersist','response','modelpsf','fpi','telluric','mjd']
    inputs = []
    for n in chknames:
        if argsdict[n] is not None:
            inputs.append(n)
    # No inputs
    if len(inputs)==0:
        parser.print_help()
        sys.exit()

    # Put together the IDL command
    cmd = "makecal"

    # Add inputs
    inpnames = ['file','det','dark','flat','wave','multiwave','dailywave','lsf','bpm','psf',
                'flux','sparse','fiber','littrow','persist','modelpersist','response','modelpsf',
                'fpi','telluric','mjd','nskip','vers','telescope']
    for i,key in enumerate(inpnames):
        val = argsdict[key]
        if val is not None:
            inputs.append(val)
            if type(val) is str:
                cmd += ","+str(key)+"='"+val+"'"
            else:
                cmd += ","+str(key)+"="+str(val)
                
    # Add flags
    flagnames = ['full','newwave','nofit','pl','clobber','unlock','librarypsf']
    for i,key in enumerate(flagnames):
        val = argsdict[key]
        # val=None when the argument was not set
        if val is not None:
            # val=[] if the argument was set but with no additional information
            if len(val)==0:
                cmd += ','+str(key)+'=1'
            # val=something if the argument was set to a specific value
            else:
                if val[0]=='1' or val[0].lower()=='true' or val[0].lower()=='t':
                    cmd += ','+str(key)+'=1'
                elif val[0]=='0' or val[0].lower()=='false' or val[0].lower()=='f':
                    cmd += ','+str(key)+'=0'
                else:
                    cmd += ','+str(key)+'=1'
                    
    # Run the command
    try:
        subprocess.call(["idl","-e",cmd])
    except:
        traceback.print_exc()
