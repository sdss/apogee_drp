#!/usr/bin/env python
#
# Run the daily APOGEE data reduction.  Newer version of autored.pro

import os
import sys
import time
from astropy.io import fits
from astropy.table import Table
from argparse import ArgumentParser
from dlnpyutils import utils as dln
import traceback
from apogee_drp.plan import runapogee
from apogee_drp.utils import email

# Main command-line program
if __name__ == "__main__":
    parser = ArgumentParser(description='Run APOGEE daily data reduction.')
    parser.add_argument('observatory', type=str, nargs=1, default='apo', help='Observatory (apo or lco)')
    parser.add_argument('--mjd', type=str, nargs=1, default='', help='MJD to run')
    parser.add_argument('--qos', type=str, nargs=1, default='', help='Which SDSS queue to use.')
    parser.add_argument('--incremental', action='store_true', help='Incremental processing.')
    parser.add_argument('--alloc', type=str, nargs=1, default='', help='Which SDSS slurm partition to use.')
    parser.add_argument('-v', '--vers', type=str, nargs=1, default='daily', help='APOGEE Reduction version')    
    parser.add_argument('-c', '--clobber', action='store_true', help='Overwrite any existing data')

    args = parser.parse_args()
    
    t0 = time.time()
    observatory = args.observatory[0]
    if isinstance(args.vers,list):
        vers = args.vers[0]
    else:
        vers = args.vers
    if isinstance(args.mjd,list):
        mjd = int(args.mjd[0])
    else:
        mjd = None
        mjd5 = runapogee.getNextMJD(observatory,vers)  # only used below, if there is a crash
    if isinstance(args.alloc,list):
        alloc = args.alloc[0]
    else:
        alloc = 'sdss-np'        
    if isinstance(args.qos,list):
        qos = args.qos[0]
    else:
        qos = 'sdss-fast'
    clobber = args.clobber
    incremental = args.incremental
    
    # Set unix environment variables for kingspeak
    #  we use notchpea by default
    if alloc=='sdss-kp':
        qos = None   # kingspeak does not have fast qos
        # run setslurm script        
        os.environ['SLURM_CLUSTER'] = 'kingspeak.peaks'
        os.environ['SLURM_CLUSTERS'] = 'kingspeak'
        os.environ['SLURM_ALLOC'] = 'sdss-kp'
        os.environ['SLURM_NODES'] = '12'
        os.environ['SLURM_PPN'] = '16'
        os.environ['SLURM_MEM_PER_CPU'] = '3750'
        os.environ['SLURM_VERS'] = 'kingspeak' # 'sdss-kp'
        #set-alias	squeue	squeue --account=sdss-kp,sdss-kp-fast --format="%18i %18j %10u %10g %12a %10P %11l %11L %2t %R"
        
    # Run daily reduction
    try:
        runapogee.run_daily(observatory,mjd5=mjd,apred=vers,alloc=alloc,qos=qos,
                            clobber=clobber,incremental=incremental)
    except KeyboardInterrupt:
        print('Quitting')
        # quit
        sys.exit()
    except:
        # Reduction crashed
        if mjd is not None:
            mjd5 = mjd
        message = 'APOGEE '+vers+' reduction '+observatory+' '+str(dln.first_el(mjd5))+' CRASHED!!'
        tracemessage = traceback.format_exc()
        # Add last 20 traceback lines to message body
        body = message+'\n\n' + '\n'.join(tracemessage.split()[-20:])
        logdir = os.environ['APOGEE_REDUX']+'/'+vers+'/log/'+observatory+'/'
        logfile = logdir+str(dln.first_el(mjd5))+'.log.crash'
        dln.writelines(logfile,tracemessage)
        email.send('apogee-pipeline-log@sdss.org',subject=message,message=body,files=logfile)
    #runapogee.run_daily(observatory,mjd5=mjd,apred=vers,qos=qos)
