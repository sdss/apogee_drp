#!/usr/bin/env python
# encoding: utf-8
#
# @Author: David Nidever
# @Date: Oct 2022
# @Filename: slurmstat
# @License: BSD 3-Clause
# @Copyright: David Nidever


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import numpy as np
import subprocess
from dlnpyutils import utils as dln
from apogee_drp.utils import slurm
from os import getlogin, getuid, getgid, makedirs, chdir
from pwd import getpwuid
from grp import getgrgid
from glob import glob
from datetime import datetime,timezone,timedelta
from astropy.table import Table

SLURMDIR = '/scratch/general/nfs1/'

""" This is a more efficient version, since it does not read the entire
file
"""


def tail(filename,nlines=10,verbose=False):
    """ https://gist.github.com/amitsaha/5990310 """

    bufsize = 8192
    fsize = os.stat(filename).st_size

    iter = 0
    with open(filename) as f:
        if bufsize > fsize:
            bufsize = fsize-1
        data = []
        while True:
            iter +=1
            f.seek(fsize-bufsize*iter)
            data.extend(f.readlines())
            if len(data) >= nlines or f.tell() == 0:
                if verbose:
                    print(''.join(data[-nlines:]))
                break
    out = data[-nlines:]
    return out

if __name__ == '__main__' :

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Check status of apogee_drp slurm jobs')
    parser.add_argument('-u','--user', type=str, nargs=1, help='Username')
    parser.add_argument('-l','--latest', action='store_true', help='Show results of latest job')
    parser.add_argument('-k','--key', type=str, nargs=1, default='', help='Job key')
    parser.add_argument('--label', type=str, nargs=1, default='', help='Job label')
    parser.add_argument('-t','--tail', action='store_true', help='Show tail of running tasks')
    parser.add_argument('-v','--verbose', action='store_true', help='Verbose output')
    parser.add_argument('--clear', type=int, nargs='?', const='3600', help='Clear dormant jobs after this delay.')    
    args = parser.parse_args()
    latest = args.latest
    verbose = args.verbose
    dotail = args.tail
    key = args.key
    if key != '':
        key = key[0]
    label = args.label
    if label != '':
        label = label[0]
    
    # Get the username
    curuser = os.getlogin()
    if args.user is not None:
        user = args.user[0]
    else:
        user = curuser
    
    # Do the query of the slurm database
    username = getpwuid(getuid())[0]
    groupname = getgrgid(getgid())[0]
    unid = getlogin()
    slurmdir = SLURMDIR+user+'/slurm/'

    # No key or label, check all directories for active jobs
    if key == '' and label == '':
        dirs = glob(slurmdir+'*/*')
        dirs = [d for d in dirs if os.path.isdir(d)]
        # get modification times
        dt = [('dir',str,200),('key',str,100),('label',str,100),('jobid',int),('dirmtime',float),
              ('starttime',float),('endtime',float),('deltatime',float),('ntasks',int)]
        jtab = np.zeros(len(dirs),dtype=np.dtype(dt))
        jtab['dir'] = dirs
        for i in range(len(dirs)):
            dir1 = jtab['dir'][i]
            key = os.path.basename(dir1)
            label = os.path.basename(os.path.dirname(dir1))
            jtab['key'][i] = key
            jtab['label'][i] = label
            ntaskfile = dir1+'/'+label+'.ntasks'
            if os.path.exists(ntaskfile):
                ntasks = dln.readlines(ntaskfile)
                ntasks = int(ntasks[0])
                jtab['ntasks'][i] = ntasks
            # Get JobID from the output filename
            outfile = glob(dir1+'/'+label+'*.out')
            if len(outfile)>0:
                outfile = outfile[0]
                jobid = os.path.basename(outfile)
                # apred_7986385[1].out
                jobid = jobid.split('_')[1].split('[')[0]
                jtab['jobid'][i] = int(jobid)
            # Modification times
            jtab['dirmtime'][i] = os.path.getmtime(dir1)
            files = glob(dir1+'/*')
            if len(files)>0:
                mtimes = [os.path.getctime(f) for f in files]
                jtab['starttime'][i] = min(mtimes)
                jtab['endtime'][i] = max(mtimes)            
                jtab['deltatime'][i] = jtab['endtime'][i]-jtab['starttime'][i]
                              
        # Sort jobs by latest modification time
        si = np.argsort(jtab['endtime'])[::-1]
        jtab = jtab[si]

        # Showing latest 10 jobs
        print('Latest 10 slurm jobs at '+str(datetime.now())[0:21])
        print('NUM       LABEL                KEY              JOBID   NTASKS   LAST MODIFIED TIME     DURATION         STATUS')
        for i in range(10):
            jtab1 = jtab[i]
            dendtime = datetime.fromtimestamp(jtab1['endtime'])
            deltatime = timedelta(seconds=jtab1['deltatime'])
            sdeltatime = str(deltatime)
            if jtab1['deltatime'] < 24*3600:
                sdeltatime = sdeltatime[0:9]
            stat = slurm.slurmstatus(jtab1['label'],jtab1['jobid'],username=user)
            if len(stat)>0:
                status = stat['State'][0]
            else:
                status = 'N/A'
            print('{:3d} {:18s} {:21s} {:9d} {:7d}  {:22s} {:15s} {:10s}'.format(i+1,jtab1['label'],jtab1['key'],jtab1['jobid'],
                                                                                 jtab1['ntasks'],str(dendtime)[0:21],sdeltatime,status))
        sys.exit()
        
    # Key input
    if key != '':
        # Only key input, get the label
        if label == '':        
            # Find the label
            dirs = glob(slurmdir+'*/*')
            dirs = [d for d in dirs if os.path.isdir(d)]
            jobdir = [d for d in dirs if os.path.basename(d) == key]
            if len(jobdir)==0:
                print('key ',key,' not found')
                sys.exit()
            jobdir = jobdir[0]
            label = jobdir.split('/')[-2]
        # Get the information
        jobdir = slurmdir+label+'/'+key+'/'
        if os.path.exists(jobdir) == False:
            print(jobdir,' NOT FOUND')
            sys.exit()
        # Get JobID from the output filename
        outfile = glob(jobdir+'*'+label+'*.out*')
        if len(outfile)>0:
            outfile = outfile[0]
            jobid = os.path.basename(outfile)
            # apred_7986385[1].out
            jobid = jobid.split('_')[1].split('[')[0]
        else:
            jobid = None
            print('No output file found')
        # Get tasks status
        ntasks = dln.readlines(jobdir+label+'.ntasks')
        ntasks = int(ntasks[0])
        tasks = Table.read(jobdir+label+'_tasks.fits')
        tasks['task'] = np.arange(len(tasks))+1
        tasks['done'] = False
        # This only returns the ones that have completed already
        tstatus = slurm.taskstatus(label,key,username=user)
        if len(tstatus)>0:
            ind1,ind2 = dln.match(tstatus['task'],tasks['task'])
            if len(ind1)>0:
                tasks['done'][ind2] = tstatus['done'][ind1]
        # Is the slurm job still running
        stat = slurm.slurmstatus(label,jobid,user)
        complete = (tasks['done']==True)
        ncomplete = np.sum(complete)
        percent = 100*ncomplete/ntasks
        print('key =',key)
        print('label =',label)
        print('jobid =',jobid)
        print('jobdir =',jobdir)
        print('Ntasks =',ntasks)
        print('Job status =',stat['State'][0])
        print('Percent complete = %2d   %d / %d tasks' % (percent,ncomplete,ntasks))
        if verbose or dotail:
            if ncomplete < ntasks:
                notcomplete, = np.where(tasks['done']==False)                
                print(str(len(notcomplete))+' tasks not completed:')
                for i in range(len(notcomplete)):
                    task1 = tasks[notcomplete[i]]
                    mtime = os.path.getmtime(task1['outfile'])
                    mdate = datetime.fromtimestamp(mtime)
                    deltatime = datetime.now()-mdate
                    print(str(i+1)+' Task '+str(task1['task']))
                    print('Last modified: ',str(mdate)[0:21])
                    print('Time since modified:',str(deltatime)[0:9])
                    print(task1['outfile'])
                    if dotail:
                        print('========================================== LOG TAIL =================================================')
                        tail(task1['outfile'],verbose=True)
                        print('========================================== ERR TAIL =================================================')
                        tail(task1['outfile'].replace('.log','.err'),verbose=True)
                        print('=====================================================================================================')


    sys.exit()

    ################# OLD SLURM CODE ################################3

    # I'm looking for 4, which means it's still running
    job0 = Job.query.filter(Job.member_id==member.id).filter(Job.status==4).all()
    # sort by time
    timestamp = [j.created.timestamp() for j in job0]
    si = np.argsort(np.array(timestamp))
    job = []
    for i in range(len(job0)):
        job.append(job0[si[i]])
    
    # Show all active jobs
    if args.latest==False and args.key=='':
        print(str(len(job))+' active jobs')
        print(' Number  Label                                 Key                         Date Created          Ntasks Nrunning  Perc. Complete')
        for i in range(len(job)):
            job1 = job[i]
            tstatus = [t.status for t in job1.tasks]
            nrunning = np.sum(np.array(tstatus)==4)
            pcomplete = ((job1.ntask-nrunning)/job1.ntask)*100
            print('{:5d}   {:20s} {:40s} {:25s} {:6d} {:6d} {:7.1f}'.format(i+1,job1.label,job1.key,job1.created.ctime(),job1.ntask,nrunning,pcomplete))
        sys.exit()

        
    print('Job: ',job1.key)
    print('Label: ',job1.label)
    print('Created: ',job1.created)
    print('Ntasks: ',job1.ntask)
    nrunning = 0
    ntodo = 0
    status = ['created','uncommitted', 'committed', 'submitted', 'running', 'complete']   
    for i in range(len(job1.tasks)):
        t = job1.tasks[i]
        if t.status==3 or t.status==4:
            print(i+1,' id:',t.id,' status:',status[t.status],' node:',t.node_number,' proc:',t.proc_number)
            print('  command:',t.script)
            print('  outfile:',t.outfile)
            if os.path.exists(t.outfile):
                mtime = os.path.getmtime(t.outfile)
                modified = datetime.fromtimestamp(mtime, tz=timezone.utc)
                dt = datetime.now().timestamp()-modified.timestamp()
                print('  outfile last modified %s, %d seconds ago' % (modified.ctime(),dt))
                # slurm_queue --status complete -i u0914350 -k 184f3610-4cb7-11ed-af14-2cea7ff4461c -t 3248
                if args.clear and dt>args.clear:
                    print('  clearing task:',t.task_number)
                    res = subprocess.run(['slurm_queue','--status','complete','-i',user,'-k',job1.key,'-t',str(t.task_number)])
            else:
                print('  outfile NOT found')
            ntodo += 1   
            if t.status==4: nrunning += 1
    print(str(nrunning)+' of '+str(job1.ntask)+' tasks still running')            
    print(str(ntodo)+' of '+str(job1.ntask)+' tasks left to finish')

    
