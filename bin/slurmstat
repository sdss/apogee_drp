#!/usr/bin/env python
# encoding: utf-8
#
# @Author: David Nidever
# @Date: Oct 2022
# @Filename: slurmstat
# @License: BSD 3-Clause
# @Copyright: David Nidever


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import pdb
import slurm as slurm
import numpy as np
from slurm import queue as pbsqueue
from slurm.models import Job,Member
from os import getlogin, getuid, getgid, makedirs, chdir
from pwd import getpwuid
from grp import getgrgid
from datetime import datetime,timezone

if __name__ == '__main__' :

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Check status of slurm jobs')
    parser.add_argument('-u','--user', type=str, nargs=1, help='Username')
    parser.add_argument('-l','--latest', action='store_true', help='Show results of latest job')
    parser.add_argument('-k','--key', type=str, nargs=1, default='', help='Job key')
    args = parser.parse_args()
    
    # Get the username
    curuser = os.getlogin()
    if args.user is not None:
        user = args.user[0]
    else:
        user = curuser
    
    # Do the query of the slurm database
    username = getpwuid(getuid())[0]
    groupname = getgrgid(getgid())[0]
    unid = getlogin()
    member = Member.query.filter(Member.username==username).filter(Member.groupname==groupname).filter(Member.unid==unid).first()


    #job = Job.query.get(job_id)
    #job = Job.query.filter(Job.identifier==identifier).filter(Job.member_id==self.member.id).first()
    #job = Job.query.filter(Job.member_id==member.id).first()
    # job.tasks
    # job.status
    # job.ntask
    # In [73]: job.key
    # Out[73]: 'b10824c0-e065-11ec-9744-2cea7ff4461c'

    #job = Job.query.filter(Job.member_id==member.id).all()

    # status
    # status = ['created','uncommitted', 'committed', 'submitted', 'running', 'complete']

    # I'm looking for 4, which means it's still running
    job0 = Job.query.filter(Job.member_id==member.id).filter(Job.status==4).all()
    # sort by time
    timestamp = [j.created.timestamp() for j in job0]
    si = np.argsort(np.array(timestamp))
    job = []
    for i in range(len(job0)):
        job.append(job0[si[i]])
    
    # Show all active jobs
    if args.latest==False and args.key=='':
        print(str(len(job))+' active jobs')
        print(' Number  Label                                 Key                         Date Created          Ntasks Nrunning  Perc. Complete')
        for i in range(len(job)):
            job1 = job[i]
            tstatus = [t.status for t in job1.tasks]
            nrunning = np.sum(np.array(tstatus)==4)
            pcomplete = ((job1.ntask-nrunning)/job1.ntask)*100
            print('{:5d}   {:20s} {:40s} {:25s} {:6d} {:6d} {:7.1f}'.format(i+1,job1.label,job1.key,job1.created.ctime(),job1.ntask,nrunning,pcomplete))
        sys.exit()

    # Selecting job with key input
    if args.key != '':
        keys = [j.key for j in job]
        ind, = np.where(np.array(keys)==args.key[0])
        if len(ind)==0:
            print('key '+args.key[0]+' not found in active jobs')
            sys.exit()
        job1 = job[ind[0]]
    else:
        job1 = job[-1]  # last job
        
    print('Job: ',job1.key)
    print('Label: ',job1.label)
    print('Created: ',job1.created)
    print('Ntasks: ',job1.ntask)
    nrunning = 0
    status = ['created','uncommitted', 'committed', 'submitted', 'running', 'complete']   
    for i in range(len(job1.tasks)):
        t = job1.tasks[i]
        if t.status==4:
            print(i+1,t.id,status[t.status])
            print('  command:',t.script)
            print('  outfile:',t.outfile)
            if os.path.exists(t.outfile):
                mtime = os.path.getmtime(t.outfile)
                modified = datetime.fromtimestamp(mtime, tz=timezone.utc)
                print('  outfile last modified %s, %d seconds ago' % (modified.ctime(),datetime.now().timestamp()-modified.timestamp()))
            else:
                print('  outfile NOT found')
            nrunning += 1
    print(str(nrunning)+' of '+str(job1.ntask)+' tasks still running')
    
    #import pdb; pdb.set_trace()
    
    # Get the tasks
    #tasks = queue.client.job.tasks

    ## Gather the information on all the tasks
    #dt = np.dtype([('task_number',int),('node_number',int),('proc_number',int),('status',int),('complete',bool)])
    #data = np.zeros(len(tasks),dtype=dt)
    #nodeproc = []
    #for i,t in enumerate(tasks):
    #    # Make sure we have the most up-to-date information
    #    #  redo the query to update the task
    #    slurm.db.session.refresh(t)
    #    data['task_number'][i] = t.task_number
    #    data['node_number'][i] = t.node_number
    #    data['proc_number'][i] = t.proc_number
    #    data['status'][i] = t.status
    #    if t.status==5:
    #        data['complete'][i] = True
    #    nodeproc.append(str(t.node_number)+'-'+str(t.proc_number))

    #index = dln.create_index(nodeproc)
    #for i,unp in enumerate(index['value']):
    #    ind = index['index'][index['lo'][i]:index['hi'][i]+1]
    #    data1 = data[ind]
    #    node,proc = unp.split('-')
    #    # Order by task number
    #    si = np.argsort(data1['task_number'])
    #    data1 = data1[si]
    #    # If last task in this group is complete,
    #    #   then they should all be done!
    #    if data1['status'][-1]==5:
    #        data['complete'][ind] = True

    #import pdb; pdb.set_trace()
