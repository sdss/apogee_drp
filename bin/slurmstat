#!/usr/bin/env python
# encoding: utf-8
#
# @Author: David Nidever
# @Date: Oct 2022
# @Filename: slurmstat
# @License: BSD 3-Clause
# @Copyright: David Nidever


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import subprocess
import pdb
import slurm as slurm
from slurm import queue as pbsqueue
from slurm.models import Job,Member
from os import getlogin, getuid, getgid, makedirs, chdir
from pwd import getpwuid
from grp import getgrgid

if __name__ == '__main__' :

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Check status of slurm jobs')
    parser.add_argument('-u','--user', type=str, nargs=1, help='Username')
    parser.add_argument('--key', type=str, nargs=1, help='Job key')
    args = parser.parse_args()
    
    # Get the username
    curuser = os.getlogin()
    if args.user is not None:
        user = args.user[0]
    else:
        user = curuser
    
    # Do the query of the slurm database
    username = getpwuid(getuid())[0]
    groupname = getgrgid(getgid())[0]
    unid = getlogin()
    member = Member.query.filter(Member.username==username).filter(Member.groupname==groupname).filter(Member.unid==unid).first()


    #job = Job.query.get(job_id)
    #job = Job.query.filter(Job.identifier==identifier).filter(Job.member_id==self.member.id).first()
    #job = Job.query.filter(Job.member_id==member.id).first()
    # job.tasks
    # job.status
    # job.ntask
    # In [73]: job.key
    # Out[73]: 'b10824c0-e065-11ec-9744-2cea7ff4461c'

    #job = Job.query.filter(Job.member_id==member.id).all()

    # status
    # status = ['created','uncommitted', 'committed', 'submitted', 'running', 'complete']

    # I'm looking for 4
    job = Job.query.filter(Job.member_id==member.id).filter(Job.status==4).all()
    ljob = job[-1]  # last job
    print('Job: ',ljob.key)
    print('Label: ',ljob.label)
    print('Created: ',ljob.created)
    print('Ntasks: ',ljob.ntask)
    nrunning = 0
    for i in range(len(ljob.tasks)):
        t = ljob.tasks[i]
        if t.status==4:
            print(i+1,t.id)
            print(t.script)
            print(t.outfile)
            nrunning += 1
    print(str(nrunning)+' of '+str(ljob.ntask)+' tasks still running')
    
    #import pdb; pdb.set_trace()
    
    # Get the tasks
    #tasks = queue.client.job.tasks

    ## Gather the information on all the tasks
    #dt = np.dtype([('task_number',int),('node_number',int),('proc_number',int),('status',int),('complete',bool)])
    #data = np.zeros(len(tasks),dtype=dt)
    #nodeproc = []
    #for i,t in enumerate(tasks):
    #    # Make sure we have the most up-to-date information
    #    #  redo the query to update the task
    #    slurm.db.session.refresh(t)
    #    data['task_number'][i] = t.task_number
    #    data['node_number'][i] = t.node_number
    #    data['proc_number'][i] = t.proc_number
    #    data['status'][i] = t.status
    #    if t.status==5:
    #        data['complete'][i] = True
    #    nodeproc.append(str(t.node_number)+'-'+str(t.proc_number))

    #index = dln.create_index(nodeproc)
    #for i,unp in enumerate(index['value']):
    #    ind = index['index'][index['lo'][i]:index['hi'][i]+1]
    #    data1 = data[ind]
    #    node,proc = unp.split('-')
    #    # Order by task number
    #    si = np.argsort(data1['task_number'])
    #    data1 = data1[si]
    #    # If last task in this group is complete,
    #    #   then they should all be done!
    #    if data1['status'][-1]==5:
    #        data['complete'][ind] = True

    #import pdb; pdb.set_trace()
